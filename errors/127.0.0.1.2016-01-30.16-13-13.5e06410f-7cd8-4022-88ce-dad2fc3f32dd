(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'None'"
p3
sS'layer'
p4
S'/Users/pmercado/Documents/GitHub/web2py/applications/hackucsc2016/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n\n    db.people.name.label = "What\'s your name?"\n\n    row = db(db.people.user_id == auth.user_id).select().first()\n    db.people.user_id.readable = db.people.user_id.writable = False\n    form = SQLFORM(db.people, record=row)\n    if form.process().accepted:\n        session.flash = "Welcome, %s!" % form.vars.name\n        redirect(URL(\'default\', \'people\'))\n    return dict(form=form)\n\ndef chat_test():\n    db.people.name.label = "What\'s your name?"\n\n    row = db(db.people.user_id == auth.user_id).select().first()\n    db.people.user_id.readable = db.people.user_id.writable = False\n    form = SQLFORM(db.people, record=row)\n    if form.process().accepted:\n        session.flash = "Welcome, %s!" % form.vars.name\n        redirect(URL(\'default\', \'people\'))\n    return dict(form=form)\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef test():\n    form = SQLFORM(db.experiences)\n    experiences_list = db(db.experiences).select()\n    return dict(experiences_list=experiences_list, form=form)\n\n\ndef reset():\n    db(db.experiences.id > 0).delete()\n    db(db.users.id > 0).delete()\n    db(db.user_responses.id > 0).delete()\n\n    redirect(URL(\'default\', \'index\'))\n\ndef people():\n    db.people.name.lable = "Name"\n    q = (db.people.id != auth.user_id)\n    links = [dict(header=\'Click to chat\',\n                  body = lambda r:A(I(_class=\'fa fa-comments\'), \'Chat\', _class=\'btn btn-primary btn-lg outline\',\n                                    _href=URL(\'default\', \'chat\', args=[r.user_id])))]\n    grid = SQLFORM.grid(q,\n                        links = links,\n                        editable=False,\n                        details=False,\n                        csv=False)\n    return dict(grid=grid)\n\ndef chat():\n    """This page enables you to chat with another person."""\n    # Let us read the record telling us who is the other person.\n    other = db(db.people.user_id == request.args(0)).select().first()\n    logger.info("I am %r, chatting with %r" % (auth.user_id, other))\n    if other is None:\n        # Back to square 0.\n        return redirect(URL(\'default\', \'index\'))\n    # Pair of people involved.\n    two_people = [auth.user_id, other.id]\n    # We want them in order, so that all messages will be stored under the same pairs of ids.\n    two_people.sort()\n    # This query selects all messages between the two people.\n    q = ((db.messages.user0 == two_people[0]) & (db.messages.user1 == two_people[1]))\n    # This is the list of messages.\n    db.messages.sender.represent = lambda v, r: \'You\' if v == auth.user_id else other.name\n    grid = SQLFORM.grid(q,\n                        fields=[db.messages.msg_time, db.messages.sender, db.messages.msg_id],\n                        details=False,\n                        create=False,\n                        orderby=~db.messages.msg_time,\n                        csv=False,\n                        sortable=False,\n                        editable=False,\n                        deletable=False,\n                        searchable=False,\n                        user_signature=False)\n\n    # This is a form for adding one more message.\n\n    db.messages.sender.readable = db.messages.sender.writable = False\n    db.messages.msg_time.readable = db.messages.msg_time.writable = False\n    form = SQLFORM(db.messages)\n    form.vars.user0 = two_people[0]\n    form.vars.user1 = two_people[1]\n    if form.process(onvalidation=store_message).accepted:\n        session.flash = "Message sent!"\n        redirect(URL(\'default\', \'chat\', args=[other.user_id]))\n\n    title = "Chat with %s" % other.name\n    return dict(title=title, grid=grid, form=form)\n\ndef store_message(form):\n    form.vars.msg_id = str(db2.textblob.insert(mytext = form.vars.msg_id))\n\ndef lessons_template():\n    return dict()\n\ndef template_menu():\n    return dict()\n\ndef template_nest():\n    return dict()\n\ndef includes():\n    return dict()\n\ndef lessons():\n    return dict()\n\ndef ourwalmart():\n    return dict()\n\ndef menu():\n    return dict()\n\ndef help():\n    return dict()\n\nresponse._vars=response._caller(chat)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/pmercado/Documents/GitHub/web2py/applications/hackucsc2016/controllers/default.py", line 168, in <module>\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/pmercado/Documents/GitHub/web2py/applications/hackucsc2016/controllers/default.py", line 102, in chat\n    other = db(db.people.user_id == request.args(0)).select().first()\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/Users/pmercado/Documents/GitHub/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1439, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'None\'\n'
p11
s.